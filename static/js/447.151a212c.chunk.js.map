{"version":3,"file":"static/js/447.151a212c.chunk.js","mappings":"qOAEaA,E,OAAaC,GAAAA,GAAH,gG,kBCGR,SAASC,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OALAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaH,GACVI,MAAK,SAAAC,GAAQ,OAAIN,EAAWM,EAAf,IACbC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,EAAV,GACf,GAAE,CAACP,KAEF,8BACsB,IAAnBF,EAAQW,SACP,wBACGX,EAAQY,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACtB,OACE,UAAClB,EAAD,YACE,2BACE,uBAAIiB,OAEN,kBACCC,IALcD,EAQpB,OAKV,C,uMC/BKE,EAAW,8BACXC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,2FACkBC,MAAM,GAAD,OACvBJ,EADuB,kCACWC,EADX,kBAC4BE,EAD5B,wCADvB,WACCX,EADD,QAISa,GAJT,mBAKqB,MAApBb,EAASc,OALV,sBAMK,IAAIC,MACRC,IAAAA,OAAAA,QAAwB,4CAPzB,wDAaqBhB,EAASiB,OAb9B,mBAekB,KAFfC,EAbH,EAaGA,SAEId,OAfP,wBAgBHY,IAAAA,OAAAA,QACE,+DAjBC,oDAsBEE,GAtBF,mEAyBA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,wGACkBP,MAAM,GAAD,OACvBJ,EADuB,yCACkBC,EADlB,oBADvB,WACCT,EADD,QAKSa,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,oCANrC,uBASqBhB,EAASiB,OAT9B,uBASGC,EATH,EASGA,QATH,kBAUEA,GAVF,mEAaA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,yFACkBT,MAAM,GAAD,OACvBJ,EADuB,mBACJa,EADI,oBACeZ,EADf,oBADvB,WACCT,EADD,QAKSa,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,kCANrC,uBASiBhB,EAASiB,OAT1B,cASCC,EATD,yBAUEA,GAVF,kEAaA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAyBD,GAAzB,2FACkBT,MAAM,GAAD,OACvBJ,EADuB,mBACJa,EADI,4BACuBZ,IAF9C,WACCT,EADD,QAKSa,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,kCANrC,uBASkBhB,EAASiB,OAT3B,uBASGM,EATH,EASGA,KATH,kBAUEA,GAVF,mEAaA,SAAezB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BuB,GAA5B,2FACkBT,MAAM,GAAD,OACvBJ,EADuB,mBACJa,EADI,4BACuBZ,IAF9C,WACCT,EADD,QAKSa,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,kCANrC,uBASqBhB,EAASiB,OAT9B,uBASGC,EATH,EASGA,QATH,kBAUEA,GAVF,mE","sources":["components/Reviews.styled.js","components/Reviews.jsx","services/api-service.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewItem = styled.li`\n  margin-bottom: 15px;\n  &:last-child {\n    margin-bottom: 0px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewItem } from './Reviews.styled';\nimport { fetchReviews } from '../services/api-service';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    fetchReviews(movieId)\n      .then(response => setReviews(response))\n      .catch(error => alert(error));\n  }, [movieId]);\n  return (\n    <>\n      {reviews.length !== 0 && (\n        <ul>\n          {reviews.map(({ author, content }) => {\n            return (\n              <ReviewItem key={author}>\n                <span>\n                  <b>{author}</b>\n                </span>\n                <br />\n                {content}\n              </ReviewItem>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n}\n","import Notiflix from 'notiflix';\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '604d147cd55c0bcd03b68a72549a64de';\n\nexport async function fetchMovies(searchMovie) {\n  const response = await fetch(\n    `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=${searchMovie}&language=en-US&include_adult=false`\n  );\n  if (!response.ok) {\n    if (response.status === 404) {\n      throw new Error(\n        Notiflix.Notify.failure('Search result not successful. Try again')\n      );\n    }\n    return;\n  }\n\n  const { results } = await response.json();\n\n  if (results.length === 0) {\n    Notiflix.Notify.failure(\n      'Search result not successful. Enter the correct movie name.'\n    );\n    return;\n  }\n\n  return results;\n}\n\nexport async function fetchTrending() {\n  const response = await fetch(\n    `${BASE_URL}3/trending/movie/week?api_key=${API_KEY}&language=en-US`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch trending movies'));\n  }\n\n  const { results } = await response.json();\n  return results;\n}\n\nexport async function fetchDetails(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const results = await response.json();\n  return results;\n}\n\nexport async function fetchCast(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}/credits?api_key=${API_KEY}`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const { cast } = await response.json();\n  return cast;\n}\n\nexport async function fetchReviews(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const { results } = await response.json();\n  return results;\n}\n"],"names":["ReviewItem","styled","Reviews","useState","reviews","setReviews","movieId","useParams","useEffect","fetchReviews","then","response","catch","error","alert","length","map","author","content","BASE_URL","API_KEY","fetchMovies","searchMovie","fetch","ok","status","Error","Notiflix","json","results","fetchTrending","fetchDetails","MovieId","fetchCast","cast"],"sourceRoot":""}