{"version":3,"file":"static/js/770.0d025443.chunk.js","mappings":"qOAEaA,E,OAAWC,GAAAA,GAAH,gG,kBCGN,SAASC,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OALAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAUH,GACPI,MAAK,SAAAC,GAAQ,OAAIN,EAAUM,EAAd,IACbC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,EAAV,GACf,GAAE,CAACP,KAEF,wBACGF,EAAOW,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACjC,OACE,SAAClB,EAAD,WACE,2BACE,yBACE,gBACEmB,IACmB,OAAjBH,EACI,4BADJ,0CAEuCA,GAEzCI,IAAI,QAGR,wBAAKH,KACL,0BAAI,cAAYC,SAbLD,EAiBlB,KAGN,C,uMCpCKI,EAAW,8BACXC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,2FACkBC,MAAM,GAAD,OACvBJ,EADuB,kCACWC,EADX,kBAC4BE,EAD5B,wCADvB,WACCb,EADD,QAISe,GAJT,mBAKqB,MAApBf,EAASgB,OALV,sBAMK,IAAIC,MACRC,IAAAA,OAAAA,QAAwB,4CAPzB,wDAaqBlB,EAASmB,OAb9B,mBAekB,KAFfC,EAbH,EAaGA,SAEIC,OAfP,wBAgBHH,IAAAA,OAAAA,QACE,+DAjBC,oDAsBEE,GAtBF,mEAyBA,SAAeE,IAAtB,4CAAO,OAAP,oBAAO,wGACkBR,MAAM,GAAD,OACvBJ,EADuB,yCACkBC,EADlB,oBADvB,WACCX,EADD,QAKSe,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,oCANrC,uBASqBlB,EAASmB,OAT9B,uBASGC,EATH,EASGA,QATH,kBAUEA,GAVF,mEAaA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,yFACkBV,MAAM,GAAD,OACvBJ,EADuB,mBACJc,EADI,oBACeb,EADf,oBADvB,WACCX,EADD,QAKSe,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,kCANrC,uBASiBlB,EAASmB,OAT1B,cASCC,EATD,yBAUEA,GAVF,kEAaA,SAAetB,EAAtB,+CAAO,OAAP,oBAAO,WAAyB0B,GAAzB,2FACkBV,MAAM,GAAD,OACvBJ,EADuB,mBACJc,EADI,4BACuBb,IAF9C,WACCX,EADD,QAKSe,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,kCANrC,uBASkBlB,EAASmB,OAT3B,uBASGM,EATH,EASGA,KATH,kBAUEA,GAVF,mEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BF,GAA5B,2FACkBV,MAAM,GAAD,OACvBJ,EADuB,mBACJc,EADI,4BACuBb,IAF9C,WACCX,EADD,QAKSe,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,kCANrC,uBASqBlB,EAASmB,OAT9B,uBASGC,EATH,EASGA,QATH,kBAUEA,GAVF,mE","sources":["components/Cast.styled.js","components/Cast.jsx","services/api-service.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastItem = styled.li`\n  margin-bottom: 15px;\n  &:last-child {\n    margin-bottom: 0px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastItem } from './Cast.styled';\nimport { fetchCast } from '../services/api-service';\n\nexport default function Cast() {\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n  useEffect(() => {\n    fetchCast(movieId)\n      .then(response => setActors(response))\n      .catch(error => alert(error));\n  }, [movieId]);\n  return (\n    <ul>\n      {actors.map(({ profile_path, name, character }) => {\n        return (\n          <CastItem key={name}>\n            <ul>\n              <li>\n                <img\n                  src={\n                    profile_path === null\n                      ? 'http://dummyimage.com/200'\n                      : `https://image.tmdb.org/t/p/w200/${profile_path}`\n                  }\n                  alt=\"\"\n                />\n              </li>\n              <li>{name}</li>\n              <li>Character: {character}</li>\n            </ul>\n          </CastItem>\n        );\n      })}\n    </ul>\n  );\n}\n","import Notiflix from 'notiflix';\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '604d147cd55c0bcd03b68a72549a64de';\n\nexport async function fetchMovies(searchMovie) {\n  const response = await fetch(\n    `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=${searchMovie}&language=en-US&include_adult=false`\n  );\n  if (!response.ok) {\n    if (response.status === 404) {\n      throw new Error(\n        Notiflix.Notify.failure('Search result not successful. Try again')\n      );\n    }\n    return;\n  }\n\n  const { results } = await response.json();\n\n  if (results.length === 0) {\n    Notiflix.Notify.failure(\n      'Search result not successful. Enter the correct movie name.'\n    );\n    return;\n  }\n\n  return results;\n}\n\nexport async function fetchTrending() {\n  const response = await fetch(\n    `${BASE_URL}3/trending/movie/week?api_key=${API_KEY}&language=en-US`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch trending movies'));\n  }\n\n  const { results } = await response.json();\n  return results;\n}\n\nexport async function fetchDetails(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const results = await response.json();\n  return results;\n}\n\nexport async function fetchCast(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}/credits?api_key=${API_KEY}`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const { cast } = await response.json();\n  return cast;\n}\n\nexport async function fetchReviews(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const { results } = await response.json();\n  return results;\n}\n"],"names":["CastItem","styled","Cast","useState","actors","setActors","movieId","useParams","useEffect","fetchCast","then","response","catch","error","alert","map","profile_path","name","character","src","alt","BASE_URL","API_KEY","fetchMovies","searchMovie","fetch","ok","status","Error","Notiflix","json","results","length","fetchTrending","fetchDetails","MovieId","cast","fetchReviews"],"sourceRoot":""}