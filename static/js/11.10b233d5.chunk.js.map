{"version":3,"file":"static/js/11.10b233d5.chunk.js","mappings":"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","sources":["components/BackLink.styled.js","components/BackLink.jsx","pages/MoviesDetails.styled.js","pages/MovieDetails.jsx","services/api-service.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n  max-width: 160px;\n\n  :hover {\n    color: orangered;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledLink } from './BackLink.styled';\n\nexport default function BackLink({ to, children }) {\n  return <StyledLink to={to}>{children}</StyledLink>;\n}\n\n\nBackLink.propTypes = {\n  to: PropTypes.object,\n}","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  > img {\n    margin-right: 10px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  margin-bottom: 20px;\n  &:last-child {\n    margin-bottom: 0px;\n  }\n`;\n\nexport const GenresList = styled.ul`\n  display: flex;\n`;\n\nexport const GenresItem = styled.ul`\n  margin-right: 10px;\n  &:last-child {\n    margin-right: 0px;\n  }\n`;\n\nexport const InfoList = styled.ul`\n  display: flex;\n  margin-bottom: 10px;\n  > li {\n    margin-right: 10px;\n    &:last-child {\n      margin-right: 0px;\n    }\n  }\n`;\n","import { Suspense, useEffect, useState, useRef } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport BackLink from '../components/BackLink';\nimport { HiArrowLeft } from 'react-icons/hi';\nimport Loader from '../components/Loader';\nimport {\n  Container,\n  ListItem,\n  GenresList,\n  GenresItem,\n  InfoList,\n} from './MoviesDetails.styled';\nimport { fetchDetails } from '../services/api-service';\n\nexport default function MovieDetails() {\n  const [movie, setMovie] = useState({});\n  const [status, setStatus] = useState('idle');\n  const { movieId } = useParams();\n  const location = useLocation();\n  const refLocation = useRef(location);\n\n  useEffect(() => {\n    setStatus('pending');\n    fetchDetails(movieId)\n      .then(response => {\n        setStatus('resolved');\n        setMovie(response);\n      })\n      .catch(error => alert(error));\n  }, [movieId]);\n\n  const {\n    original_title,\n    poster_path,\n    vote_average,\n    overview,\n    genres,\n    release_date,\n  } = movie;\n  const date = new Date(release_date);\n  const year = date.getFullYear();\n\n  if (status === 'pending') {\n    return <Loader />;\n  }\n\n  if (status === 'resolved') {\n    return (\n      <>\n        <BackLink to={refLocation.current.state}>\n          <HiArrowLeft size=\"24\" />\n          Back to movies\n        </BackLink>\n        <Container>\n          <img src={`https://image.tmdb.org/t/p/w400/${poster_path}`} alt=\"\" />\n          <ul>\n            <ListItem>\n              <b>\n                {original_title} ({year})\n              </b>\n            </ListItem>\n            <ListItem>User score: {(vote_average * 10).toFixed(0)}%</ListItem>\n            <ListItem>\n              <b>Overview</b>\n              <br /> {overview}\n            </ListItem>\n            <ListItem>\n              <b>Genres:</b>\n              <GenresList>\n                {genres.map(({ name }) => {\n                  return <GenresItem key={name}>{name}</GenresItem>;\n                })}\n              </GenresList>\n            </ListItem>\n          </ul>\n        </Container>\n        <p>Additional informationk</p>\n        <InfoList>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </InfoList>\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </>\n    );\n  }\n}\n","import Notiflix from 'notiflix';\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '604d147cd55c0bcd03b68a72549a64de';\n\nexport async function fetchMovies(searchMovie) {\n  const response = await fetch(\n    `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=${searchMovie}&language=en-US&include_adult=false`\n  );\n  if (!response.ok) {\n    if (response.status === 404) {\n      throw new Error(\n        Notiflix.Notify.failure('Search result not successful. Try again')\n      );\n    }\n    return;\n  }\n\n  const { results } = await response.json();\n\n  if (results.length === 0) {\n    Notiflix.Notify.failure(\n      'Search result not successful. Enter the correct movie name.'\n    );\n    return;\n  }\n\n  return results;\n}\n\nexport async function fetchTrending() {\n  const response = await fetch(\n    `${BASE_URL}3/trending/movie/week?api_key=${API_KEY}&language=en-US`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch trending movies'));\n  }\n\n  const { results } = await response.json();\n  return results;\n}\n\nexport async function fetchDetails(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const results = await response.json();\n  return results;\n}\n\nexport async function fetchCast(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}/credits?api_key=${API_KEY}`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const { cast } = await response.json();\n  return cast;\n}\n\nexport async function fetchReviews(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const { results } = await response.json();\n  return results;\n}\n"],"names":["StyledLink","styled","Link","BackLink","to","children","Container","ListItem","GenresList","GenresItem","InfoList","MovieDetails","useState","movie","setMovie","status","setStatus","movieId","useParams","location","useLocation","refLocation","useRef","useEffect","fetchDetails","then","response","catch","error","alert","original_title","poster_path","vote_average","overview","genres","release_date","year","Date","getFullYear","Loader","current","state","size","src","alt","toFixed","map","name","Suspense","fallback","BASE_URL","API_KEY","fetchMovies","searchMovie","fetch","ok","Error","Notiflix","json","results","length","fetchTrending","MovieId","fetchCast","cast","fetchReviews"],"sourceRoot":""}