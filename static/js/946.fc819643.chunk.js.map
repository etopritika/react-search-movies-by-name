{"version":3,"file":"static/js/946.fc819643.chunk.js","mappings":"wPAEaA,EAAQC,EAAAA,GAAAA,GAAH,gDAILC,EAAWD,EAAAA,GAAAA,GAAH,sI,kBCDN,SAASE,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAeC,EAAAA,EAAAA,MAQrB,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GAAQ,OAAIN,EAAUM,EAAd,IACbC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,EAAV,GACf,GAAE,KAGD,iCACE,SAACd,EAAD,UAAO,oBACP,wBACGK,EAAOW,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjB,OACE,SAAChB,EAAD,WACE,SAAC,KAAD,CAAMiB,GAAE,iBAAYF,GAAMG,MAAOb,EAAjC,SACGW,KAFUD,EAMlB,QAIR,C,uMC9BKI,EAAW,8BACXC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,2FACkBC,MAAM,GAAD,OACvBJ,EADuB,kCACWC,EADX,kBAC4BE,EAD5B,wCADvB,WACCZ,EADD,QAISc,GAJT,mBAKqB,MAApBd,EAASe,OALV,sBAMK,IAAIC,MACRC,IAAAA,OAAAA,QAAwB,4CAPzB,wDAaqBjB,EAASkB,OAb9B,mBAekB,KAFfC,EAbH,EAaGA,SAEIC,OAfP,wBAgBHH,IAAAA,OAAAA,QACE,+DAjBC,oDAsBEE,GAtBF,mEAyBA,SAAerB,IAAtB,4CAAO,OAAP,oBAAO,wGACkBe,MAAM,GAAD,OACvBJ,EADuB,yCACkBC,EADlB,oBADvB,WACCV,EADD,QAKSc,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,oCANrC,uBASqBjB,EAASkB,OAT9B,uBASGC,EATH,EASGA,QATH,kBAUEA,GAVF,mEAaA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,yFACkBT,MAAM,GAAD,OACvBJ,EADuB,mBACJa,EADI,oBACeZ,EADf,oBADvB,WACCV,EADD,QAKSc,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,kCANrC,uBASiBjB,EAASkB,OAT1B,cASCC,EATD,yBAUEA,GAVF,kEAaA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAyBD,GAAzB,2FACkBT,MAAM,GAAD,OACvBJ,EADuB,mBACJa,EADI,4BACuBZ,IAF9C,WACCV,EADD,QAKSc,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,kCANrC,uBASkBjB,EAASkB,OAT3B,uBASGM,EATH,EASGA,KATH,kBAUEA,GAVF,mEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BH,GAA5B,2FACkBT,MAAM,GAAD,OACvBJ,EADuB,mBACJa,EADI,4BACuBZ,IAF9C,WACCV,EADD,QAKSc,GALT,sBAMG,IAAIE,MAAMC,IAAAA,OAAAA,QAAwB,kCANrC,uBASqBjB,EAASkB,OAT9B,uBASGC,EATH,EASGA,QATH,kBAUEA,GAVF,mE","sources":["pages/Home.styled.js","pages/Home.jsx","services/api-service.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin-bottom: 10px;\n`;\n\nexport const ListLink = styled.li`\n  margin-bottom: 8px;\n  &:last-child {\n    margin-right: 0px;\n  }\n  :hover {\n    color: orangered;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useLocation, Link } from 'react-router-dom';\nimport { Title, ListLink } from './Home.styled';\nimport { fetchTrending } from '../services/api-service';\n\nexport default function Home() {\n  const [movies, setMovies] = useState([]);\n  const homeLocation = useLocation();\n\n  useEffect(() => {\n    fetchTrending()\n      .then(response => setMovies(response))\n      .catch(error => alert(error));\n  }, []);\n\n  return (\n    <>\n      <Title>Trending today</Title>\n      <ul>\n        {movies.map(({ id, title }) => {\n          return (\n            <ListLink key={id}>\n              <Link to={`movies/${id}`} state={homeLocation}>\n                {title}\n              </Link>\n            </ListLink>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n","import Notiflix from 'notiflix';\nconst BASE_URL = 'https://api.themoviedb.org/';\nconst API_KEY = '604d147cd55c0bcd03b68a72549a64de';\n\nexport async function fetchMovies(searchMovie) {\n  const response = await fetch(\n    `${BASE_URL}3/search/movie?api_key=${API_KEY}&query=${searchMovie}&language=en-US&include_adult=false`\n  );\n  if (!response.ok) {\n    if (response.status === 404) {\n      throw new Error(\n        Notiflix.Notify.failure('Search result not successful. Try again')\n      );\n    }\n    return;\n  }\n\n  const { results } = await response.json();\n\n  if (results.length === 0) {\n    Notiflix.Notify.failure(\n      'Search result not successful. Enter the correct movie name.'\n    );\n    return;\n  }\n\n  return results;\n}\n\nexport async function fetchTrending() {\n  const response = await fetch(\n    `${BASE_URL}3/trending/movie/week?api_key=${API_KEY}&language=en-US`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch trending movies'));\n  }\n\n  const { results } = await response.json();\n  return results;\n}\n\nexport async function fetchDetails(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const results = await response.json();\n  return results;\n}\n\nexport async function fetchCast(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}/credits?api_key=${API_KEY}`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const { cast } = await response.json();\n  return cast;\n}\n\nexport async function fetchReviews(MovieId) {\n  const response = await fetch(\n    `${BASE_URL}3/movie/${MovieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (!response.ok) {\n    throw new Error(Notiflix.Notify.failure('Failed to fetch movie details'));\n  }\n\n  const { results } = await response.json();\n  return results;\n}\n"],"names":["Title","styled","ListLink","Home","useState","movies","setMovies","homeLocation","useLocation","useEffect","fetchTrending","then","response","catch","error","alert","map","id","title","to","state","BASE_URL","API_KEY","fetchMovies","searchMovie","fetch","ok","status","Error","Notiflix","json","results","length","fetchDetails","MovieId","fetchCast","cast","fetchReviews"],"sourceRoot":""}